{"ast":null,"code":"'use strict';\n\nvar _interopRequireWildcard = function _interopRequireWildcard(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n};\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _hexToRgb = require('./utils');\n\nvar _removeClass$getTopMargin$fadeIn$show$addClass = require('./handle-dom');\n\nvar _defaultParams = require('./default-params');\n\nvar _defaultParams2 = _interopRequireWildcard(_defaultParams);\n/*\n * Add modal + overlay to DOM\n */\n\n\nvar _injectedHTML = require('./injected-html');\n\nvar _injectedHTML2 = _interopRequireWildcard(_injectedHTML);\n\nvar modalClass = '.sweet-alert';\nvar overlayClass = '.sweet-overlay';\n\nvar sweetAlertInitialize = function sweetAlertInitialize() {\n  var sweetWrap = document.createElement('div');\n  sweetWrap.innerHTML = _injectedHTML2['default']; // Append elements to body\n\n  while (sweetWrap.firstChild) {\n    document.body.appendChild(sweetWrap.firstChild);\n  }\n};\n/*\n * Get DOM element of modal\n */\n\n\nvar getModal = function (_getModal) {\n  function getModal() {\n    return _getModal.apply(this, arguments);\n  }\n\n  getModal.toString = function () {\n    return _getModal.toString();\n  };\n\n  return getModal;\n}(function () {\n  var $modal = document.querySelector(modalClass);\n\n  if (!$modal) {\n    sweetAlertInitialize();\n    $modal = getModal();\n  }\n\n  return $modal;\n});\n/*\n * Get DOM element of input (in modal)\n */\n\n\nvar getInput = function getInput() {\n  var $modal = getModal();\n\n  if ($modal) {\n    return $modal.querySelector('input');\n  }\n};\n/*\n * Get DOM element of overlay\n */\n\n\nvar getOverlay = function getOverlay() {\n  return document.querySelector(overlayClass);\n};\n/*\n * Add box-shadow style to button (depending on its chosen bg-color)\n */\n\n\nvar setFocusStyle = function setFocusStyle($button, bgColor) {\n  var rgbColor = _hexToRgb.hexToRgb(bgColor);\n\n  $button.style.boxShadow = '0 0 2px rgba(' + rgbColor + ', 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)';\n};\n/*\n * Animation when opening modal\n */\n\n\nvar openModal = function openModal(callback) {\n  var $modal = getModal();\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.fadeIn(getOverlay(), 10);\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.show($modal);\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.addClass($modal, 'showSweetAlert');\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($modal, 'hideSweetAlert');\n\n  window.previousActiveElement = document.activeElement;\n  var $okButton = $modal.querySelector('button.confirm');\n  $okButton.focus();\n  setTimeout(function () {\n    _removeClass$getTopMargin$fadeIn$show$addClass.addClass($modal, 'visible');\n  }, 500);\n  var timer = $modal.getAttribute('data-timer');\n\n  if (timer !== 'null' && timer !== '') {\n    var timerCallback = callback;\n    $modal.timeout = setTimeout(function () {\n      var doneFunctionExists = (timerCallback || null) && $modal.getAttribute('data-has-done-function') === 'true';\n\n      if (doneFunctionExists) {\n        timerCallback(null);\n      } else {\n        sweetAlert.close();\n      }\n    }, timer);\n  }\n};\n/*\n * Reset the styling of the input\n * (for example if errors have been shown)\n */\n\n\nvar resetInput = function resetInput() {\n  var $modal = getModal();\n  var $input = getInput();\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($modal, 'show-input');\n\n  $input.value = _defaultParams2['default'].inputValue;\n  $input.setAttribute('type', _defaultParams2['default'].inputType);\n  $input.setAttribute('placeholder', _defaultParams2['default'].inputPlaceholder);\n  resetInputError();\n};\n\nvar resetInputError = function resetInputError(event) {\n  // If press enter => ignore\n  if (event && event.keyCode === 13) {\n    return false;\n  }\n\n  var $modal = getModal();\n  var $errorIcon = $modal.querySelector('.sa-input-error');\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($errorIcon, 'show');\n\n  var $errorContainer = $modal.querySelector('.sa-error-container');\n\n  _removeClass$getTopMargin$fadeIn$show$addClass.removeClass($errorContainer, 'show');\n};\n/*\n * Set \"margin-top\"-property on modal based on its computed height\n */\n\n\nvar fixVerticalPosition = function fixVerticalPosition() {\n  var $modal = getModal();\n  $modal.style.marginTop = _removeClass$getTopMargin$fadeIn$show$addClass.getTopMargin(getModal());\n};\n\nexports.sweetAlertInitialize = sweetAlertInitialize;\nexports.getModal = getModal;\nexports.getOverlay = getOverlay;\nexports.getInput = getInput;\nexports.setFocusStyle = setFocusStyle;\nexports.openModal = openModal;\nexports.resetInput = resetInput;\nexports.resetInputError = resetInputError;\nexports.fixVerticalPosition = fixVerticalPosition;","map":null,"metadata":{},"sourceType":"script"}