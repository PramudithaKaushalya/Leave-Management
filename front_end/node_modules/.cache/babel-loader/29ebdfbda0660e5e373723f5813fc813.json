{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nimport Icon from '../icon';\nimport Breadcrumb from '../breadcrumb';\nimport Avatar from '../avatar';\nimport TransButton from '../_util/transButton';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\n\nvar renderBack = function renderBack(prefixCls, backIcon, onBack) {\n  if (!backIcon || !onBack) {\n    return null;\n  }\n\n  return React.createElement(LocaleReceiver, {\n    componentName: \"PageHeader\"\n  }, function (_ref) {\n    var back = _ref.back;\n    return React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-back\")\n    }, React.createElement(TransButton, {\n      onClick: function onClick(e) {\n        if (onBack) {\n          onBack(e);\n        }\n      },\n      className: \"\".concat(prefixCls, \"-back-button\"),\n      \"aria-label\": back\n    }, backIcon));\n  });\n};\n\nvar renderBreadcrumb = function renderBreadcrumb(breadcrumb) {\n  return React.createElement(Breadcrumb, breadcrumb);\n};\n\nvar renderTitle = function renderTitle(prefixCls, props) {\n  var title = props.title,\n      avatar = props.avatar,\n      subTitle = props.subTitle,\n      tags = props.tags,\n      extra = props.extra,\n      backIcon = props.backIcon,\n      onBack = props.onBack;\n  var headingPrefixCls = \"\".concat(prefixCls, \"-heading\");\n\n  if (title || subTitle || tags || extra) {\n    var backIconDom = renderBack(prefixCls, backIcon, onBack);\n    return React.createElement(\"div\", {\n      className: headingPrefixCls\n    }, backIconDom, avatar && React.createElement(Avatar, avatar), title && React.createElement(\"span\", {\n      className: \"\".concat(headingPrefixCls, \"-title\")\n    }, title), subTitle && React.createElement(\"span\", {\n      className: \"\".concat(headingPrefixCls, \"-sub-title\")\n    }, subTitle), tags && React.createElement(\"span\", {\n      className: \"\".concat(headingPrefixCls, \"-tags\")\n    }, tags), extra && React.createElement(\"span\", {\n      className: \"\".concat(headingPrefixCls, \"-extra\")\n    }, extra));\n  }\n\n  return null;\n};\n\nvar renderFooter = function renderFooter(prefixCls, footer) {\n  if (footer) {\n    return React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-footer\")\n    }, footer);\n  }\n\n  return null;\n};\n\nvar renderChildren = function renderChildren(prefixCls, children) {\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\")\n  }, children);\n};\n\nvar PageHeader = function PageHeader(props) {\n  return React.createElement(ConfigConsumer, null, function (_ref2) {\n    var getPrefixCls = _ref2.getPrefixCls,\n        pageHeader = _ref2.pageHeader;\n    var customizePrefixCls = props.prefixCls,\n        style = props.style,\n        footer = props.footer,\n        children = props.children,\n        breadcrumb = props.breadcrumb,\n        customizeClassName = props.className;\n    var ghost = true; // Use `ghost` from `props` or from `ConfigProvider` instead.\n\n    if ('ghost' in props) {\n      ghost = props.ghost;\n    } else if (pageHeader && 'ghost' in pageHeader) {\n      ghost = pageHeader.ghost;\n    }\n\n    var prefixCls = getPrefixCls('page-header', customizePrefixCls);\n    var breadcrumbDom = breadcrumb && breadcrumb.routes ? renderBreadcrumb(breadcrumb) : null;\n    var className = classnames(prefixCls, customizeClassName, _defineProperty({\n      'has-breadcrumb': breadcrumbDom,\n      'has-footer': footer\n    }, \"\".concat(prefixCls, \"-ghost\"), ghost));\n    return React.createElement(\"div\", {\n      className: className,\n      style: style\n    }, breadcrumbDom, renderTitle(prefixCls, props), children && renderChildren(prefixCls, children), renderFooter(prefixCls, footer));\n  });\n};\n\nPageHeader.defaultProps = {\n  backIcon: React.createElement(Icon, {\n    type: \"arrow-left\"\n  })\n};\nexport default PageHeader;","map":null,"metadata":{},"sourceType":"module"}