{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _isIE8 = require('./utils');\n\nvar _getModal$getInput$setFocusStyle = require('./handle-swal-dom');\n\nvar _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide = require('./handle-dom');\n\nvar alertTypes = ['error', 'warning', 'info', 'success', 'input', 'prompt'];\n/*\n * Set type, text and actions on modal\n */\n\nvar setParameters = function setParameters(params) {\n  var modal = _getModal$getInput$setFocusStyle.getModal();\n\n  var $title = modal.querySelector('h2');\n  var $text = modal.querySelector('p');\n  var $cancelBtn = modal.querySelector('button.cancel');\n  var $confirmBtn = modal.querySelector('button.confirm');\n  /*\n   * Title\n   */\n\n  $title.innerHTML = params.html ? params.title : _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.title).split('\\n').join('<br>');\n  /*\n   * Text\n   */\n\n  $text.innerHTML = params.html ? params.text : _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.text || '').split('\\n').join('<br>');\n  if (params.text) _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.show($text);\n  /*\n   * Custom class\n   */\n\n  if (params.customClass) {\n    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass(modal, params.customClass);\n\n    modal.setAttribute('data-custom-class', params.customClass);\n  } else {\n    // Find previously set classes and remove them\n    var customClass = modal.getAttribute('data-custom-class');\n\n    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.removeClass(modal, customClass);\n\n    modal.setAttribute('data-custom-class', '');\n  }\n  /*\n   * Icon\n   */\n\n\n  _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.hide(modal.querySelectorAll('.sa-icon'));\n\n  if (params.type && !_isIE8.isIE8()) {\n    var _ret = function () {\n      var validType = false;\n\n      for (var i = 0; i < alertTypes.length; i++) {\n        if (params.type === alertTypes[i]) {\n          validType = true;\n          break;\n        }\n      }\n\n      if (!validType) {\n        logStr('Unknown alert type: ' + params.type);\n        return {\n          v: false\n        };\n      }\n\n      var typesWithIcons = ['success', 'error', 'warning', 'info'];\n      var $icon = undefined;\n\n      if (typesWithIcons.indexOf(params.type) !== -1) {\n        $icon = modal.querySelector('.sa-icon.' + 'sa-' + params.type);\n\n        _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.show($icon);\n      }\n\n      var $input = _getModal$getInput$setFocusStyle.getInput(); // Animate icon\n\n\n      switch (params.type) {\n        case 'success':\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon, 'animate');\n\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-tip'), 'animateSuccessTip');\n\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-long'), 'animateSuccessLong');\n\n          break;\n\n        case 'error':\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon, 'animateErrorIcon');\n\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-x-mark'), 'animateXMark');\n\n          break;\n\n        case 'warning':\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon, 'pulseWarning');\n\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-body'), 'pulseWarningIns');\n\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass($icon.querySelector('.sa-dot'), 'pulseWarningIns');\n\n          break;\n\n        case 'input':\n        case 'prompt':\n          $input.setAttribute('type', params.inputType);\n          $input.value = params.inputValue;\n          $input.setAttribute('placeholder', params.inputPlaceholder);\n\n          _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.addClass(modal, 'show-input');\n\n          setTimeout(function () {\n            $input.focus();\n            $input.addEventListener('keyup', swal.resetInputError);\n          }, 400);\n          break;\n      }\n    }();\n\n    if (typeof _ret === 'object') {\n      return _ret.v;\n    }\n  }\n  /*\n   * Custom image\n   */\n\n\n  if (params.imageUrl) {\n    var $customIcon = modal.querySelector('.sa-icon.sa-custom');\n    $customIcon.style.backgroundImage = 'url(' + params.imageUrl + ')';\n\n    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.show($customIcon);\n\n    var _imgWidth = 80;\n    var _imgHeight = 80;\n\n    if (params.imageSize) {\n      var dimensions = params.imageSize.toString().split('x');\n      var imgWidth = dimensions[0];\n      var imgHeight = dimensions[1];\n\n      if (!imgWidth || !imgHeight) {\n        logStr('Parameter imageSize expects value with format WIDTHxHEIGHT, got ' + params.imageSize);\n      } else {\n        _imgWidth = imgWidth;\n        _imgHeight = imgHeight;\n      }\n    }\n\n    $customIcon.setAttribute('style', $customIcon.getAttribute('style') + 'width:' + _imgWidth + 'px; height:' + _imgHeight + 'px');\n  }\n  /*\n   * Show cancel button?\n   */\n\n\n  modal.setAttribute('data-has-cancel-button', params.showCancelButton);\n\n  if (params.showCancelButton) {\n    $cancelBtn.style.display = 'inline-block';\n  } else {\n    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.hide($cancelBtn);\n  }\n  /*\n   * Show confirm button?\n   */\n\n\n  modal.setAttribute('data-has-confirm-button', params.showConfirmButton);\n\n  if (params.showConfirmButton) {\n    $confirmBtn.style.display = 'inline-block';\n  } else {\n    _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.hide($confirmBtn);\n  }\n  /*\n   * Custom text on cancel/confirm buttons\n   */\n\n\n  if (params.cancelButtonText) {\n    $cancelBtn.innerHTML = _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.cancelButtonText);\n  }\n\n  if (params.confirmButtonText) {\n    $confirmBtn.innerHTML = _hasClass$addClass$removeClass$escapeHtml$_show$show$_hide$hide.escapeHtml(params.confirmButtonText);\n  }\n  /*\n   * Custom color on confirm button\n   */\n\n\n  if (params.confirmButtonColor) {\n    // Set confirm button to selected background color\n    $confirmBtn.style.backgroundColor = params.confirmButtonColor; // Set the confirm button color to the loading ring\n\n    $confirmBtn.style.borderLeftColor = params.confirmLoadingButtonColor;\n    $confirmBtn.style.borderRightColor = params.confirmLoadingButtonColor; // Set box-shadow to default focused button\n\n    _getModal$getInput$setFocusStyle.setFocusStyle($confirmBtn, params.confirmButtonColor);\n  }\n  /*\n   * Allow outside click\n   */\n\n\n  modal.setAttribute('data-allow-outside-click', params.allowOutsideClick);\n  /*\n   * Callback function\n   */\n\n  var hasDoneFunction = params.doneFunction ? true : false;\n  modal.setAttribute('data-has-done-function', hasDoneFunction);\n  /*\n   * Animation\n   */\n\n  if (!params.animation) {\n    modal.setAttribute('data-animation', 'none');\n  } else if (typeof params.animation === 'string') {\n    modal.setAttribute('data-animation', params.animation); // Custom animation\n  } else {\n    modal.setAttribute('data-animation', 'pop');\n  }\n  /*\n   * Timer\n   */\n\n\n  modal.setAttribute('data-timer', params.timer);\n};\n\nexports['default'] = setParameters;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}