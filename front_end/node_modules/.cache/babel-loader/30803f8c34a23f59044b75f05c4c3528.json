{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * Composes a variable number of CSS helper functions.\n * Returns a function that accepts all the original arguments\n * of the functions it composed. If the original function\n * accepted multiple arguments, they must be passed as\n * an array.\n * @example\n * const translateXandRotateY = compose(translateX, rotateY);\n * const cssValue = translateXandRotateY('-5px', '30deg');\n */\n\n\nvar compose = exports.compose = function compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, styleArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      styleArgs[_key2] = arguments[_key2];\n    }\n\n    var result = funcs.reduce(function (acc, func, i) {\n      var arg = styleArgs[i];\n      return acc + ' ' + (Array.isArray(arg) ? func.apply(undefined, _toConsumableArray(arg)) : func(arg));\n    }, '');\n    return result.trim();\n  };\n};\n\nvar cubicBezier = exports.cubicBezier = function cubicBezier(a, b, c, d) {\n  return 'cubic-bezier(' + a + ', ' + b + ', ' + c + ', ' + d + ')';\n};\n\nvar translate3d = exports.translate3d = function translate3d(a, b, c) {\n  return 'translate3d(' + a + ', ' + b + ', ' + c + ')';\n};\n\nvar translateX = exports.translateX = function translateX(a) {\n  return 'translateX(' + a + ')';\n};\n\nvar scale3d = exports.scale3d = function scale3d(a, b, c) {\n  return 'scale3d(' + a + ', ' + b + ', ' + c + ')';\n};\n\nvar scale = exports.scale = function scale(a) {\n  return 'scale(' + a + ')';\n};\n\nvar skewX = exports.skewX = function skewX(deg) {\n  return 'skewX(' + deg + 'deg)';\n};\n\nvar skewY = exports.skewY = function skewY(deg) {\n  return 'skewY(' + deg + 'deg)';\n};\n\nvar skewXY = exports.skewXY = function skewXY(x, y) {\n  return skewX(x) + ' ' + skewY(y);\n};\n\nvar rotateY = exports.rotateY = function rotateY(a) {\n  return 'rotateY(' + a + ')';\n};\n\nvar rotate3d = exports.rotate3d = function rotate3d(a, b, c, d) {\n  return 'rotate3d(' + a + ', ' + b + ', ' + c + ', ' + d + 'deg)';\n};\n\nvar perspective = exports.perspective = function perspective(a) {\n  return 'perspective(' + a + ')';\n};","map":null,"metadata":{},"sourceType":"script"}