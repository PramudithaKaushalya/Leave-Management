{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigConsumer } from '../config-provider';\nimport warning from '../_util/warning';\nimport { composeRef } from '../_util/ref';\n\nvar Typography = function Typography(_a, ref) {\n  var customizePrefixCls = _a.prefixCls,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'article' : _a$component,\n      className = _a.className,\n      ariaLabel = _a['aria-label'],\n      setContentRef = _a.setContentRef,\n      children = _a.children,\n      restProps = __rest(_a, [\"prefixCls\", \"component\", \"className\", 'aria-label', \"setContentRef\", \"children\"]);\n\n  var mergedRef = ref;\n\n  if (setContentRef) {\n    warning(false, 'Typography', '`setContentRef` is deprecated. Please use `ref` instead.');\n    mergedRef = composeRef(ref, setContentRef);\n  }\n\n  return React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var Component = component;\n    var prefixCls = getPrefixCls('typography', customizePrefixCls);\n    return React.createElement(Component, _extends({\n      className: classNames(prefixCls, className),\n      \"aria-label\": ariaLabel,\n      ref: mergedRef\n    }, restProps), children);\n  });\n};\n\nvar RefTypography;\n\nif (React.forwardRef) {\n  RefTypography = React.forwardRef(Typography);\n  RefTypography.displayName = 'Typography';\n} else {\n  var TypographyWrapper =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(TypographyWrapper, _React$Component);\n\n    function TypographyWrapper() {\n      var _this;\n\n      _classCallCheck(this, TypographyWrapper);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(TypographyWrapper).apply(this, arguments));\n      _this.state = {};\n      return _this;\n    }\n\n    _createClass(TypographyWrapper, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Typography, this.props);\n      }\n    }]);\n\n    return TypographyWrapper;\n  }(React.Component);\n\n  RefTypography = TypographyWrapper;\n} // es default export should use const instead of let\n\n\nvar ExportTypography = RefTypography;\nexport default ExportTypography;","map":null,"metadata":{},"sourceType":"module"}