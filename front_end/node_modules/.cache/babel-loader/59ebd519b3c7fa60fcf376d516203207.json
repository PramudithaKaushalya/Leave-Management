{"ast":null,"code":"var crypto = require('crypto');\n\nvar saltChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nvar saltCharsCount = saltChars.length;\n\nfunction generateSalt(len) {\n  if (typeof len != 'number' || len <= 0 || len !== parseInt(len, 10)) throw new Error('Invalid salt length');\n\n  if (crypto.randomBytes) {\n    return crypto.randomBytes(Math.ceil(len / 2)).toString('hex').substring(0, len);\n  } else {\n    for (var i = 0, salt = ''; i < len; i++) {\n      salt += saltChars.charAt(Math.floor(Math.random() * saltCharsCount));\n    }\n\n    return salt;\n  }\n}\n\nfunction generateHash(algorithm, salt, password, iterations) {\n  iterations = iterations || 1;\n\n  try {\n    var hash = password;\n\n    for (var i = 0; i < iterations; ++i) {\n      hash = crypto.createHmac(algorithm, salt).update(hash).digest('hex');\n    }\n\n    return algorithm + '$' + salt + '$' + iterations + '$' + hash;\n  } catch (e) {\n    throw new Error('Invalid message digest algorithm');\n  }\n}\n\nfunction makeBackwardCompatible(hashedPassword) {\n  var parts = hashedPassword.split('$');\n\n  if (parts.length === 3) {\n    parts.splice(2, 0, 1);\n    hashedPassword = parts.join(\"$\");\n  }\n\n  return hashedPassword;\n}\n\nmodule.exports.generate = function (password, options) {\n  if (typeof password != 'string') throw new Error('Invalid password');\n  options || (options = {});\n  options.algorithm || (options.algorithm = 'sha1');\n  options.saltLength || options.saltLength == 0 || (options.saltLength = 8);\n  options.iterations || (options.iterations = 1);\n  var salt = generateSalt(options.saltLength);\n  return generateHash(options.algorithm, salt, password, options.iterations);\n};\n\nmodule.exports.verify = function (password, hashedPassword) {\n  if (!password || !hashedPassword) return false;\n  hashedPassword = makeBackwardCompatible(hashedPassword);\n  var parts = hashedPassword.split('$');\n  if (parts.length != 4) return false;\n\n  try {\n    return generateHash(parts[0], parts[1], password, parts[2]) == hashedPassword;\n  } catch (e) {}\n\n  return false;\n};\n\nmodule.exports.isHashed = function (password) {\n  if (!password) return false;\n  return password.split('$').length == 4;\n};","map":null,"metadata":{},"sourceType":"script"}