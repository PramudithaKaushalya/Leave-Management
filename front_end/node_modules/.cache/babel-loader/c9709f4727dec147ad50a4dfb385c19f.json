{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from '../_util/warning';\nimport ResponsiveObserve, { responsiveArray } from '../_util/responsiveObserve';\nimport { ConfigConsumer } from '../config-provider';\nimport Col from './Col';\n\nvar DescriptionsItem = function DescriptionsItem(_ref) {\n  var children = _ref.children;\n  return children;\n};\n/**\n * Convert children into `column` groups.\n * @param children: DescriptionsItem\n * @param column: number\n */\n\n\nvar generateChildrenRows = function generateChildrenRows(children, column) {\n  var rows = [];\n  var columns = null;\n  var leftSpans;\n  var itemNodes = toArray(children);\n  itemNodes.forEach(function (node, index) {\n    var itemNode = node;\n\n    if (!columns) {\n      leftSpans = column;\n      columns = [];\n      rows.push(columns);\n    } // Always set last span to align the end of Descriptions\n\n\n    var lastItem = index === itemNodes.length - 1;\n    var lastSpanSame = true;\n\n    if (lastItem) {\n      lastSpanSame = !itemNode.props.span || itemNode.props.span === leftSpans;\n      itemNode = React.cloneElement(itemNode, {\n        span: leftSpans\n      });\n    } // Calculate left fill span\n\n\n    var _itemNode$props$span = itemNode.props.span,\n        span = _itemNode$props$span === void 0 ? 1 : _itemNode$props$span;\n    columns.push(itemNode);\n    leftSpans -= span;\n\n    if (leftSpans <= 0) {\n      columns = null;\n      warning(leftSpans === 0 && lastSpanSame, 'Descriptions', 'Sum of column `span` in a line exceeds `column` of Descriptions.');\n    }\n  });\n  return rows;\n};\n\nvar renderRow = function renderRow(children, index, _ref2, bordered, layout, colon) {\n  var prefixCls = _ref2.prefixCls;\n\n  var renderCol = function renderCol(colItem, type, idx) {\n    return React.createElement(Col, {\n      child: colItem,\n      bordered: bordered,\n      colon: colon,\n      type: type,\n      key: \"\".concat(type, \"-\").concat(colItem.key || idx),\n      layout: layout\n    });\n  };\n\n  var cloneChildren = [];\n  var cloneContentChildren = [];\n  toArray(children).forEach(function (childrenItem, idx) {\n    cloneChildren.push(renderCol(childrenItem, 'label', idx));\n\n    if (layout === 'vertical') {\n      cloneContentChildren.push(renderCol(childrenItem, 'content', idx));\n    } else if (bordered) {\n      cloneChildren.push(renderCol(childrenItem, 'content', idx));\n    }\n  });\n\n  if (layout === 'vertical') {\n    return [React.createElement(\"tr\", {\n      className: \"\".concat(prefixCls, \"-row\"),\n      key: \"label-\".concat(index)\n    }, cloneChildren), React.createElement(\"tr\", {\n      className: \"\".concat(prefixCls, \"-row\"),\n      key: \"content-\".concat(index)\n    }, cloneContentChildren)];\n  }\n\n  return React.createElement(\"tr\", {\n    className: \"\".concat(prefixCls, \"-row\"),\n    key: index\n  }, cloneChildren);\n};\n\nvar defaultColumnMap = {\n  xxl: 3,\n  xl: 3,\n  lg: 3,\n  md: 3,\n  sm: 2,\n  xs: 1\n};\n\nvar Descriptions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Descriptions, _React$Component);\n\n  function Descriptions() {\n    var _this;\n\n    _classCallCheck(this, Descriptions);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Descriptions).apply(this, arguments));\n    _this.state = {\n      screens: {}\n    };\n    return _this;\n  }\n\n  _createClass(Descriptions, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var column = this.props.column;\n      this.token = ResponsiveObserve.subscribe(function (screens) {\n        if (_typeof(column) !== 'object') {\n          return;\n        }\n\n        _this2.setState({\n          screens: screens\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ResponsiveObserve.unsubscribe(this.token);\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn() {\n      var column = this.props.column;\n\n      if (_typeof(column) === 'object') {\n        for (var i = 0; i < responsiveArray.length; i++) {\n          var breakpoint = responsiveArray[i];\n\n          if (this.state.screens[breakpoint] && column[breakpoint] !== undefined) {\n            return column[breakpoint] || defaultColumnMap[breakpoint];\n          }\n        }\n      } // If the configuration is not an object, it is a number, return number\n\n\n      if (typeof column === 'number') {\n        return column;\n      } // If it is an object, but no response is found, this happens only in the test.\n      // Maybe there are some strange environments\n\n\n      return 3;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(ConfigConsumer, null, function (_ref3) {\n        var _classNames;\n\n        var getPrefixCls = _ref3.getPrefixCls;\n        var _this3$props = _this3.props,\n            className = _this3$props.className,\n            customizePrefixCls = _this3$props.prefixCls,\n            title = _this3$props.title,\n            size = _this3$props.size,\n            children = _this3$props.children,\n            _this3$props$bordered = _this3$props.bordered,\n            bordered = _this3$props$bordered === void 0 ? false : _this3$props$bordered,\n            _this3$props$layout = _this3$props.layout,\n            layout = _this3$props$layout === void 0 ? 'horizontal' : _this3$props$layout,\n            _this3$props$colon = _this3$props.colon,\n            colon = _this3$props$colon === void 0 ? true : _this3$props$colon,\n            style = _this3$props.style;\n        var prefixCls = getPrefixCls('descriptions', customizePrefixCls);\n\n        var column = _this3.getColumn();\n\n        var cloneChildren = toArray(children).map(function (child) {\n          if (React.isValidElement(child)) {\n            return React.cloneElement(child, {\n              prefixCls: prefixCls\n            });\n          }\n\n          return null;\n        }).filter(function (node) {\n          return node;\n        });\n        var childrenArray = generateChildrenRows(cloneChildren, column);\n        return React.createElement(\"div\", {\n          className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(size), size !== 'default'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-bordered\"), !!bordered), _classNames)),\n          style: style\n        }, title && React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-title\")\n        }, title), React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-view\")\n        }, React.createElement(\"table\", null, React.createElement(\"tbody\", null, childrenArray.map(function (child, index) {\n          return renderRow(child, index, {\n            prefixCls: prefixCls\n          }, bordered, layout, colon);\n        })))));\n      });\n    }\n  }]);\n\n  return Descriptions;\n}(React.Component);\n\nDescriptions.defaultProps = {\n  size: 'default',\n  column: defaultColumnMap\n};\nDescriptions.Item = DescriptionsItem;\nexport default Descriptions;","map":null,"metadata":{},"sourceType":"module"}