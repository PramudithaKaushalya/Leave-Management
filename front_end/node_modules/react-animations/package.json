{
  "_from": "react-animations",
  "_id": "react-animations@1.0.0",
  "_inBundle": false,
  "_integrity": "sha512-ePPpVgdKnNEXm+LP1ww5s3n0JzebBw9QdRfxRqogzeg1PDIn6kf0pmvgeTeVZQXXpGmHImkIeTiaQR1O6xjntA==",
  "_location": "/react-animations",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-animations",
    "fetchSpec": "latest",
    "name": "react-animations",
    "raw": "react-animations",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-animations/-/react-animations-1.0.0.tgz",
  "_shasum": "d96222920dfeabec8984d9b2ef2c5a5aadb40f06",
  "_shrinkwrap": null,
  "_spec": "react-animations",
  "_where": "C:\\Users\\Pramuditha Kaushalya\\Desktop\\spform",
  "author": {
    "email": "brandon.dail@formidable.com",
    "name": "Brandon Dail"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A collection of animations for inline styles",
  "devDependencies": {
    "aphrodite": "^0.5.0",
    "babel-cli": "^6.14.0",
    "babel-eslint": "^6.1.2",
    "babel-jest": "^15.0.0",
    "babel-loader": "^6.2.5",
    "babel-plugin-transform-export-extensions": "^6.8.0",
    "babel-plugin-transform-object-rest-spread": "^6.8.0",
    "babel-polyfill": "^6.13.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-react": "^6.11.1",
    "eslint": "^3.6.0",
    "eslint-config-formidable": "^2.0.1",
    "eslint-plugin-filenames": "^1.1.0",
    "eslint-plugin-flowtype": "^2.19.0",
    "eslint-plugin-import": "^1.16.0",
    "flow-bin": "^0.32.0",
    "jest": "^15.1.1",
    "jest-cli": "^15.1.1",
    "radium": "^0.18.1",
    "react": "^15.3.2",
    "react-dom": "^15.3.2",
    "rimraf": "^2.5.4",
    "webpack": "^2.1.0-beta.25",
    "webpack-dev-server": "^1.16.1"
  },
  "keywords": [
    "animation",
    "css-in-js",
    "radium",
    "react"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-animations",
  "optionalDependencies": {},
  "readme": "# react-animations\n\n\nA collection of animations that can be used with any inline style library that supports using objects to define keyframe animations, such as Radium or Aphrodite. React-animations implements all animations from [animate.css](https://daneden.github.io/animate.css/).\n\n[Check out the interactive demo](http://react-animations.herokuapp.com/).\n\n### Usage\n\nYou can import each animation directly from the main package\n\n```js\nimport { fadeIn } from 'react-animations'\n```\n\nor you can import a specific animation directly\n\n```js\nimport fadeIn from 'react-animations/lib/fade-in'\n```\n\n\n### Usage with Radium\n\n```js\nimport React from 'react';\nimport { bounce } from 'react-animations';\nimport Radium, {StyleRoot} from 'radium';\n\nconst styles = {\n  bounce: {\n    animation: 'x 1s',\n    animationName: Radium.keyframes(bounce, 'bounce')\n  }\n}\n\nclass Test extends React.Component {\n  render() {\n    <StyleRoot>\n      <div className=\"test\" style={styles.bounce}>\n      </div>\n    </StyleRoot>\n  }\n}\n\n```\n\n### Usage with Aphrodite\n\n```js\nimport { bounce } from 'react-animations';\nimport { StyleSheet, css } from 'aphrodite';\n\nconst styles = StyleSheet.create({\n  bounce: {\n    animationName: bounce,\n    animationDuration: '1s'\n  }\n})\n```\n\n### Usage with JSS\n\n```js\nimport { bounce } from 'react-animations';\nimport jss from 'jss'\nimport preset from 'jss-preset-default'\n\njss.setup(preset())\n\nconst {classes} = jss.createStyleSheet({\n  '@keyframes bounce': bounce,\n  bounce: {\n    animationName: 'bounce',\n    animationDuration: '1s',\n  },\n}).attach()\n```\n\n### Usage with `styled-components`\n\n```js\nimport styled, { keyframes } from 'styled-components';\nimport { bounce } from 'react-animations';\n\nconst bounceAnimation = keyframes`${bounce}`;\n\nconst BouncyDiv = styled.div`\n  animation: 1s ${bounceAnimation};\n`;\n```\n\n## Animations\n\nBelow is a list of all available animations\n\n`bouceOut`\n\n`bounce`\n\n`bounceIn`\n\n`bounceInDown`\n\n`bounceInLeft`\n\n`bounceInRight`\n\n`bounceInUp`\n\n`bounceOutDown`\n\n`bounceOutLeft`\n\n`bounceOutRight`\n\n`bounceOutUp`\n\n`fadeIn`\n\n`fadeInDown`\n\n`fadeInDownBig`\n\n`fadeInLeft`\n\n`fadeInLeftBig`\n\n`fadeInRight`\n\n`fadeInRightBig`\n\n`fadeInUp`\n\n`fadeInUpBig`\n\n`fadeOut`\n\n`fadeOutDown`\n\n`fadeOutDownBig`\n\n`fadeOutLeft`\n\n`fadeOutLeftBig`\n\n`fadeOutRight`\n\n`fadeOutRightBig`\n\n`fadeOutUp`\n\n`fadeOutUpBig`\n\n`flash`\n\n`flip`\n\n`flipInX`\n\n`flipInY`\n\n`flipOutX`\n\n`flipOutY`\n\n`headShake`\n\n`hinge`\n\n`jello`\n\n`lightSpeedIn`\n\n`lightSpeedOut`\n\n`pulse`\n\n`rollIn`\n\n`rollOut`\n\n`rotateIn`\n\n`rotateInDownLeft`\n\n`rotateInDownRight`\n\n`rotateInUpLeft`\n\n`rotateInUpRight`\n\n`rotateOut`\n\n`rotateOutDownLeft`\n\n`rotateOutDownRight`\n\n`rotateOutUpLeft`\n\n`rotateOutUpRight`\n\n`rubberBand`\n\n`shake`\n\n`slideInDown`\n\n`slideInLeft`\n\n`slideInRight`\n\n`slideInUp`\n\n`slideOutDown`\n\n`slideOutLeft`\n\n`slideOutRight`\n\n`slideOutUp`\n\n`swing`\n\n`tada`\n\n`wobble`\n\n`zoomIn`\n\n`zoomInDown`\n\n`zoomInLeft`\n\n`zoomInRight`\n\n`zoomInUp`\n\n`zoomOut`\n\n`zoomOutDown`\n\n`zoomOutLeft`\n\n`zoomOutRight`\n\n`zoomOutUp`\n\n\n## Merge\n\nreact-animations also exports a `merge` function that takes two animations and returns a new animation that combines the transforms from both. This is experimental and wont work (well) with animations that have conflicting transforms, such as `fadeIn` and `fadeOut`. The merged animation can be used just like any of the imported animations.\n\n\n```js\n\nimport { merge, tada, flip } from 'react-animations';\nconst tadaFlip = merge(tada, flip);\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "babel src -d lib --ignore **/*.spec.js",
    "build-dist": "webpack",
    "build-dist-min": "NODE_ENV=production webpack",
    "clean-dist": "rimraf dist && mkdir dist",
    "demo": "node demo/server",
    "dist": "npm run clean-dist && npm run build-dist && npm run build-dist-min",
    "flow": "flow",
    "lint": "eslint src",
    "prepublish": "npm run test && npm run build && npm run dist",
    "test": "npm run flow && npm run lint && npm run test:only",
    "test:only": "jest"
  },
  "version": "1.0.0"
}
