{
  "_from": "react-highlight-words",
  "_id": "react-highlight-words@0.16.0",
  "_inBundle": false,
  "_integrity": "sha512-q34TwCSJOL+5pVDv6LUj3amaoyXdNDwd7zRqVAvceOrO9g1haWLAglK6WkGLMNUa3PFN8EgGedLg/k8Gpndxqg==",
  "_location": "/react-highlight-words",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-highlight-words",
    "fetchSpec": "latest",
    "name": "react-highlight-words",
    "raw": "react-highlight-words",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-highlight-words/-/react-highlight-words-0.16.0.tgz",
  "_shasum": "4b4b9824e3d2b98789d3e3b3aedb5e961ae1b7cf",
  "_shrinkwrap": null,
  "_spec": "react-highlight-words",
  "_where": "C:\\Users\\Pramuditha Kaushalya\\Desktop\\VX Leave\\front_end",
  "author": {
    "name": "Brian Vaughn"
  },
  "bugs": {
    "url": "https://github.com/bvaughn/react-highlight-words/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "highlight-words-core": "^1.2.0",
    "memoize-one": "^4.0.0",
    "prop-types": "^15.5.8"
  },
  "deprecated": false,
  "description": "React component to highlight words within a larger body of text",
  "devDependencies": {
    "babel": "^5.8.34",
    "babel-core": "^5.8.34",
    "babel-eslint": "^4.1.6",
    "babel-loader": "^5.4.0",
    "babel-plugin-react-transform": "^1.1.1",
    "cross-env": "^5.1.3",
    "css-loader": "^0.23.0",
    "cssnext": "^1.8.4",
    "cssnext-loader": "^1.0.1",
    "expect.js": "^0.3.1",
    "gh-pages": "^0.8.0",
    "html-webpack-plugin": "^1.7.0",
    "karma": "^0.13.15",
    "karma-junit-reporter": "^0.3.8",
    "karma-mocha": "^0.2.1",
    "karma-phantomjs2-launcher": "^0.3.2",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-spec-reporter": "0.0.23",
    "karma-webpack": "^1.7.0",
    "latinize": "^0.2.0",
    "lodash": "^4.17.10",
    "mocha": "^2.3.4",
    "phantomjs2": "^2.0.2",
    "react": "^15.1.0",
    "react-dom": "^15.1.0",
    "react-transform-catch-errors": "^1.0.0",
    "react-transform-hmr": "^1.0.1",
    "redbox-react": "1.2.6",
    "rimraf": "^2.4.4",
    "standard": "^5.4.1",
    "style-loader": "^0.13.0",
    "watch": "^0.16.0",
    "webpack": "^1.12.9",
    "webpack-dev-server": "^1.14.0",
    "worker-loader": "^0.7.0"
  },
  "homepage": "https://github.com/bvaughn/react-highlight-words#readme",
  "keywords": [
    "highlight",
    "highlighter",
    "matches",
    "occurrences",
    "react",
    "react-component",
    "reactjs",
    "search",
    "substring",
    "text",
    "words"
  ],
  "license": "MIT",
  "main": "dist/main.js",
  "name": "react-highlight-words",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0 || ^16.0.0-0"
  },
  "readme": "<img src=\"https://cloud.githubusercontent.com/assets/29597/11913937/0d2dcd78-a629-11e5-83e7-6a17b6d765a5.png\" width=\"260\" height=\"260\">\n\nReact component to highlight words within a larger body of text.\n\nCheck out a demo [here](https://bvaughn.github.io/react-highlight-words).\n\n## Usage\n\nTo use it, just provide it with an array of search terms and a body of text to highlight.\n\n[Try this example in Code Sandbox.](https://codesandbox.io/s/5v8yqoxv7k)\n\n```html\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Highlighter from \"react-highlight-words\";\n\nReactDOM.render(\n  <Highlighter\n    highlightClassName=\"YourHighlightClass\"\n    searchWords={[\"and\", \"or\", \"the\"]}\n    autoEscape={true}\n    textToHighlight=\"The dog is chasing the cat. Or perhaps they're just playing?\"\n  />,\n  document.getElementById(\"root\")\n);\n```\n\nAnd the `Highlighter` will mark all occurrences of search terms within the text:\n\n<img width=\"368\" alt=\"screen shot 2015-12-19 at 8 23 43 am\" src=\"https://cloud.githubusercontent.com/assets/29597/11914033/e3c319f6-a629-11e5-896d-1a5ce22c9ea2.png\">\n\n## Props\n\n| Property | Type | Required? | Description |\n|:---|:---|:---:|:---|\n| activeClassName | String |  | The class name to be applied to an active match. Use along with `activeIndex` |\n| activeIndex | String |  | Specify the match index that should be actively highlighted. Use along with `activeClassName` |\n| activeStyle | Object |  | The inline style to be applied to an active match. Use along with `activeIndex` |\n| autoEscape | Boolean |  | Escape characters in `searchWords` which are meaningful in regular expressions |\n| className | String |  | CSS class name applied to the outer/wrapper `<span>` |\n| caseSensitive | Boolean |  | Search should be case sensitive; defaults to `false` |\n| findChunks | Function |  | Use a custom function to search for matching chunks. This makes it possible to use arbitrary logic when looking for matches. See the default `findChunks` function in [highlight-words-core](https://github.com/bvaughn/highlight-words-core) for signature. Have a look at the [custom findChunks example](https://codesandbox.io/s/k20x3ox31o) on how to use it. |\n| highlightClassName | String or Object |  | CSS class name applied to highlighted text or object mapping search term matches to class names. |\n| highlightStyle | Object |  | Inline styles applied to highlighted text |\n| highlightTag | Node |  | Type of tag to wrap around highlighted matches; defaults to `mark` but can also be a React element (class or functional) |\n| sanitize | Function |  | Process each search word and text to highlight before comparing (eg remove accents); signature `(text: string): string` |\n| searchWords | Array<String &#124; RegExp> | ✓ | Array of search words. String search terms are automatically cast to RegExps unless `autoEscape` is true. |\n| textToHighlight | String | ✓ | Text to highlight matches in |\n| unhighlightClassName | String |  | CSS class name applied to unhighlighted text |\n| unhighlightStyle | Object |  | Inline styles applied to unhighlighted text |\n| * | any | | Any other props (such as `title` or `data-*`) are applied to the outer/wrapper `<span>` |\n\n## Custom highlight tag\n\nBy default this component uses an HTML Mark Text element (`<mark>`) to wrap matched text, but you can inject a custom tag using the `highlightTag` property. This tag should be a React component that accepts the following properties:\n\n| Property | Type | Description |\n|:---|:---|:---|\n| children | String | Text to be highlighted |\n| highlightIndex | Number | Index of matched text |\n\nFor example:\n```js\nconst Highlight = ({ children, highlightIndex }) => (\n  <strong className=\"highlighted-text\">{children}</strong>\n);\n```\n\n## Installation\n```\nyarn add react-highlight-words\n```\n\n```\nnpm i --save react-highlight-words\n```\n\n## License\nMIT License - fork, modify and use however you want.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bvaughn/react-highlight-words.git"
  },
  "scripts": {
    "build": "npm run build:website && npm run build:dist",
    "build:dist": "npm run clean:dist && cross-env NODE_ENV=production webpack --config webpack.config.dist.cjs.js --bail && cross-env NODE_ENV=production webpack --config webpack.config.dist.umd.js --bail",
    "build:website": "npm run clean:website && cross-env NODE_ENV=production webpack --config webpack.config.website.js -p --bail",
    "clean": "npm run clean:website && npm run clean:dist",
    "clean:dist": "rimraf dist",
    "clean:website": "rimraf build",
    "deploy": "gh-pages -d build",
    "lint": "standard",
    "postpublish": "npm run deploy",
    "prebuild": "npm run lint",
    "prepublish": "npm run build",
    "start": "webpack-dev-server --hot --inline --config webpack.config.dev.js",
    "test": "cross-env NODE_ENV=test karma start",
    "watch": "watch 'clear && npm run lint -s && npm run test -s' src"
  },
  "standard": {
    "global": [
      "afterAll",
      "afterEach",
      "beforeAll",
      "beforeEach",
      "describe",
      "it",
      "jasmine"
    ],
    "ignore": [
      "build",
      "dist",
      "node_modules"
    ],
    "parser": "babel-eslint"
  },
  "version": "0.16.0"
}
